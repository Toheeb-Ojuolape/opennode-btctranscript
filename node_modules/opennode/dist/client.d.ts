import { OpenNodeEnv } from "./types";
import { OpenNodeBalance, OpenNodeCharge, OpenNodeChargeRequest, OpenNodeChargeWebhook, OpenNodeRates, OpenNodeRefund, OpenNodeRefundRequest, OpenNodeWithdrawal, OpenNodeWithdrawalRequest } from "./types/v1";
import * as v2 from "./types/v2";
export declare class OpenNodeClient {
    env: OpenNodeEnv;
    private api_key;
    private instanceV1;
    private instanceV2;
    constructor(key: string, environment?: OpenNodeEnv);
    createCharge(charge: OpenNodeChargeRequest): Promise<OpenNodeCharge>;
    chargeInfo(id: string): Promise<OpenNodeCharge>;
    listCharges(): Promise<OpenNodeCharge[]>;
    initiateWithdrawal: (withdrawal: OpenNodeWithdrawalRequest) => Promise<OpenNodeWithdrawal>;
    withdrawalInfo(id: string): Promise<OpenNodeWithdrawal>;
    listWithdrawals(): Promise<OpenNodeWithdrawal[]>;
    listRates(): Promise<OpenNodeRates>;
    listCurrencies(): Promise<string[]>;
    getBalance(): Promise<OpenNodeBalance>;
    userBalance(): Promise<OpenNodeBalance>;
    accountBalance(): Promise<OpenNodeBalance>;
    verifySignature(charge: OpenNodeChargeWebhook): boolean;
    refundCharge(refund: OpenNodeRefundRequest): Promise<OpenNodeRefund>;
    listRefunds(): Promise<OpenNodeRefund[]>;
    refundInfo(id: string): Promise<OpenNodeRefund>;
    initiatePayout(payout: v2.OpenNodePayoutRequest): Promise<v2.OpenNodePayout>;
    payoutInfo(id: string): Promise<v2.OpenNodePayout>;
    initiateExchange(exchange: v2.OpenNodeExchangeRequest): Promise<v2.OpenNodeExchange>;
    initiateWithdrawalAsync(withdrawal: v2.OpenNodeWithdrawalRequest): Promise<v2.OpenNodeWithdrawal>;
    createLnUrlWithdrawal(lnUrlWithdrawal: v2.OpenNodeLnURLWithdrawalRequest): Promise<v2.OpenNodeWithdrawal>;
}
//# sourceMappingURL=client.d.ts.map