export interface OpenNodeChargeRequest {
    amount: number;
    currency?: string;
    description?: string;
    customer_email?: string;
    notif_email?: string;
    customer_name?: string;
    order_id?: string;
    callback_url?: string;
    success_url?: string;
    auto_settle?: boolean;
    ttl?: number;
    metadata?: Record<string, any>;
    split_to_btc_bps?: number;
    notify_receiver?: boolean;
    kyc_required?: boolean;
    desc_hash?: string;
}
export type OpenNodeChargeWebhook = {
    hashed_order: string;
} & OpenNodeCharge;
export interface OpenNodeCharge {
    id: string;
    description: string;
    amount: number;
    missing_amt: number;
    status: string;
    fiat_value: number;
    source_fiat_value: number;
    currency: string;
    created_at: number;
    order_id: string;
    address: string;
    metadata?: OpenNodeChargeMetadata;
    expires_at?: string;
    auto_settle?: boolean;
    chain_invoice?: OpenNodeOnchainInvoice;
    transactions?: OpenNodeChargeTransaction[];
}
export interface OpenNodeOnchainInvoice {
    address: string;
    settled_at: number;
    tx: string;
}
export interface OpenNodeChargeTransaction {
    address: string;
    created_at: number;
    settled_at: number;
    tx: string;
    status: string;
    amount: number;
}
export interface OpenNodeChargeMetadata {
    email: string;
    invoice_id: string;
}
export interface OpenNodeWithdrawalRequest {
    type: "chain" | "ln" | "wire";
    amount?: number;
    address?: string;
    callback_url?: string;
}
export interface OpenNodeWithdrawal {
    id: string;
    email: string;
    address: string;
    amount: string;
    fee: string;
    tx: string;
    status: string;
    created_at: number;
    processed_at: string;
    checkout_id: string;
}
type UserCurrencyRecord = {
    [fiatIso: string]: number;
};
export type OpenNodeRates = Record<string, {
    BTC: number;
    currency: string;
} & UserCurrencyRecord>;
export interface OpenNodeBalance {
    balance: {
        BTC: number;
    } & UserCurrencyRecord;
}
export interface OpenNodeRefundRequest {
    checkout_id: string;
    address: string;
    email?: string;
}
export interface OpenNodeRefund {
    id: string;
    email: string;
    address: string;
    amount: string;
    fee: string;
    tx: string;
    status: string;
    created_at: number;
    processed_at: string;
    checkout_id: string;
}
export {};
//# sourceMappingURL=v1.d.ts.map