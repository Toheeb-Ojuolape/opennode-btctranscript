import { OpenNodeEnv, v1, v2 } from "./types";
export { OpenNodeClient } from "./client";
export { OpenNodeError } from "./OpenNodeError";
export * from "./types";
export declare function setCredentials(key: string, environment?: OpenNodeEnv): void;
export declare function createCharge(charge: v1.OpenNodeChargeRequest): Promise<v1.OpenNodeCharge>;
export declare function chargeInfo(id: string): Promise<v1.OpenNodeCharge>;
export declare function listCharges(): Promise<v1.OpenNodeCharge[]>;
export declare function initiateWithdrawal(withdrawal: v1.OpenNodeWithdrawalRequest): Promise<v1.OpenNodeWithdrawal>;
export declare function initiateExchange(exchange: v2.OpenNodeExchangeRequest): Promise<v2.OpenNodeExchange>;
export declare function withdrawalInfo(id: string): Promise<v1.OpenNodeWithdrawal>;
export declare function listWithdrawals(): Promise<v1.OpenNodeWithdrawal[]>;
export declare function listRates(): Promise<v1.OpenNodeRates>;
export declare function listCurrencies(): Promise<string[]>;
export declare function getBalance(): Promise<v1.OpenNodeBalance>;
export declare function accountBalance(): Promise<v1.OpenNodeBalance>;
export declare function initiateWithdrawalAsync(withdrawal: v2.OpenNodeWithdrawalOnchainRequest): Promise<v2.OpenNodeWithdrawal>;
export declare function signatureIsValid(charge: v1.OpenNodeChargeWebhook): boolean;
export declare function refundCharge(refund: v1.OpenNodeRefundRequest): Promise<v1.OpenNodeRefund>;
export declare function listRefunds(): Promise<v1.OpenNodeRefund[]>;
export declare function refundInfo(id: string): Promise<v1.OpenNodeRefund>;
export declare function initiatePayout(payout: v2.OpenNodePayoutRequest): Promise<v2.OpenNodePayout>;
export declare function payoutInfo(id: string): Promise<v2.OpenNodePayout>;
export declare function createLnUrlWithdrawal(withdrawal: v2.OpenNodeLnURLWithdrawalRequest): Promise<v2.OpenNodeWithdrawal>;
//# sourceMappingURL=index.d.ts.map